post:
  servers: 
    - url: 'https://localhost:4001'
    - url: 'https://api.gracehopper.xyz:8443'
  tags: 
    - Game
  summary: Move Piece
  operationId: move
  security: []
  description: event(move) 
    Allows player to execute a chess move.
    Only legal movements can be accepted.
  requestBody:
    content:
      application/json:
        schema:
          required:
            - move
          properties:
            move:
              type: string
              description: |
                Chess move to execute.
                The move format is in long algebraic notation.

                *Examples:* **e2e4**, **e7e5**, **e1g1** (white short castling),
                **e7e8q** (for promotion).
        example:
          move: "e2e4"
  responses:
    '200':
      description: event(moved) 
        The move contained in this event.
      content:
        application/json:
          schema:
            type: object
            properties:
              move:
                type: string
                description: Last move executed.
              turn:
                type: string
                description: Next player to move.
                enum: 
                  - LIGHT
                  - DARK
              timerLight:
                type: integer
                description: |
                  Time remaining, in milliseconds, for the light player to move
                  *(only sent if the game uses timer)*.
              timerDark:
                type: integer
                description: |
                  Time remaining, in milliseconds, for the dark player to move
                  *(only sent if the game uses timer)*.
          example:
            move: "e2e4"
            turn: "DARK"
            timerLight: 282042
            timerDark: 300000
    '300':
      description: event(game_over) 
        The game has ended.
      content:
        application/json:
          schema:
            type: object
            properties:
              endState:
                type: string
                description: |
                  Reason why the game ended.
                enum:
                  - CHECKMATE
                  - DRAW
              winner:
                type: string
                description: |
                  Winner of the game 
                  *(only if the game ended with checkmate)*.
              eloDiff:
                type: number
                description: |
                  Rating gain for the player listening to this socket
                  *(only in competitive games)*.
              newElo: 
                type: number
                description: |
                  New elo score of the player listening to this socket
                  *(only in competitive games)*.
          examples:
            checkmate:
              value:
                endState: "CHECKMATE"
                winner: "LIGHT"
            draw:
              value:
                endState: "DRAW"
            competitive victory:
              value:
                endState: "CHECKMATE"
                winner: "LIGHT"
                eloDiff: 15
                newElo: 843
            competitive defeat:
              value:
                endState: "CHECKMATE"
                winner: "DARK"
                eloDiff: -13
                newElo: 726
    '400':
      description: event(error)
        Something went wrong.
      content:
        text/plain:
          schema:
            description: Details of what caused the error.
            type: object
            properties:
              code:
                type: integer
                description: |
                  Error code with a meaning similar to HTTP status errors.
              error:
                type: string
                description: |
                  Error type.
              message:
                type: string
                description: |
                  Description of what caused the error.
